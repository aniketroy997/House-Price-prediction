from flask import Flask, request, jsonify
import util

app = Flask(__name__)

@app.route('/get_location_names', methods=['GET'])
def get_location_names():
    response = jsonify({
        'locations': util.get_location_names()
    })
    response.headers.add('Access-Control-Allow-Origin', '*')

    return response

@app.route('/predict_home_price', methods=['GET', 'POST'])
def predict_home_price():
    total_sqft = float(request.form['total_sqft'])
    location = request.form['location']
    bhk = int(request.form['bhk'])
    resale = int(request.form['Resale'])

    response = jsonify({
        'estimated_price': util.get_estimated_price(location,total_sqft,bhk,resale)
    })
    response.headers.add('Access-Control-Allow-Origin', '*')

    return response

if __name__ == "__main__":
    print("Starting Python Flask Server For Home Price Prediction...")
    util.load_saved_artifacts()
    app.run()














import pickle
import json
import numpy as np

__locations = None
__data_columns = None
__model = None

def get_estimated_price(location,area,no_of_bedrooms,resale):
    try:
        loc_index = __data_columns.index(location.lower())
    except:
        loc_index = -1

    x = np.zeros(len(__data_columns))
    x[0] = area
    x[1] = no_of_bedrooms
    x[2] = resale
    if loc_index>=0:
        x[loc_index] = 1

    return round(__model.predict([x])[0],2)


def load_saved_artifacts():
    global  __data_columns
    global __locations

    with open("./artifacts/Banglore_columns.json", "r") as f:
        __data_columns = json.load(f)['data_columns']
        __locations = __data_columns[15:]  # After 15 columns location are there.

    global __model
    if __model is None:
        with open('./artifacts/Banglore_home_prices_model.pickle', 'rb') as f:
            __model = pickle.load(f)

def get_location_names():
    return __locations

def get_data_columns():
    return __data_columns

if __name__ == '__main__':
    load_saved_artifacts()
    print(get_location_names())
    print(get_estimated_price('Kondapur',1000,2,0))
